#Python feature: type hint
from typing import List

#for python built-in library, bisect   
import bisect

class Solution:

    def _merge( self, left_part, right_part ):


        merge_list = sorted( left_part + right_part )

        return merge_list


    def merge_sort_with_rev_pair_count( self, nums: List[int]) -> (List[int], int):
        

        
        if len( nums) <= 1:
        # Base case:

            return nums, 0

        else:
        # General case
            mid = len(nums) // 2

            # Divide-and-conquer with the merge-sort framework

            # Divide:
            left_part, left_rev_pair_count = self.merge_sort_with_rev_pair_count( nums[ : mid] )
            right_part, right_rev_pair_count = self.merge_sort_with_rev_pair_count( nums[ mid: ] )


            # Conquer:
            # collect the reverse pair count from left part and right part
            rev_pair_count = left_rev_pair_count + right_rev_pair_count

            cur_rev_pair_count = 0

            for r in right_part:
                
                # for every r in right_part, calculate the reverse pairs
                cur_rev_pair_count = len( left_part ) - bisect.bisect( left_part, 2*r)

                # if there exist one r has no reverse pairs,
                # then any r' after r must have no reverse pairs, either.
                if cur_rev_pair_count == 0:
                    break

                # update total reverse pair count from current reverse pair count
                rev_pair_count += cur_rev_pair_count

            # Conquer:
            # Merge left_part and right into a sorted list with ascending order
            merged_list = self._merge( left_part, right_part)

        return merged_list, rev_pair_count



    def is_strictly_increasing_by_one( self, nums :List[int]) -> bool:

        result = all( ( i < j and (j-1) == 1 ) for i, j in zip(nums, nums[1:]) ) 

        return result


    def reversePairs( self, nums: List[int]) -> int:

        # corner case handling
        if self.is_strictly_increasing_by_one( nums ) or len(nums) <= 1:
            return 0

        sorted_list, count_of_reverse_pair = self.merge_sort_with_rev_pair_count( nums )

        return count_of_reverse_pair
